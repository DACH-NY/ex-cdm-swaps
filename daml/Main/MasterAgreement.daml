-- Copyright (c) 2019, Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Main.MasterAgreement where

import Org.Isda.Cdm.EventSpecificationModule as Cdm hiding (Party, RefData)
import Main.Event.Instance
import Main.Event.Proposal hiding (Accept)
import Main.Market.Contract
import Main.Types
import Main.Utils.Common
import Main.Utils.Cdm

---------------------------------------------- Instance ------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

-- | Master Agreement used to trigger new events. This can either be the proposal of an event
-- (e.g. NewTrade, Termination, etc.) or the creation of a derived event.
template MasterAgreementInstance
  with
    p1  : Party
    p2  : Party
  where
    signatory p1, p2

    nonconsuming choice ProposeNewTrade: ContractId EventProposal
      with
        exerciser  : Party
        ps      : [PartyWithId]
        base    : BaseEvent
        after   : PostInceptionState
      controller exerciser
      do
        assertMsg "exerciser exists" $ p1 == exerciser || p2 == exerciser
        let spec = NewTradeSpec with ..
        event <- setEventRosettaKey $ Cdm.buildNewTradeEvent spec
        create EventProposal with ps, d = event, sigs = [exerciser]

---------------------------------------------- Proposal ------------------------------------------------------
--------------------------------------------------------------------------------------------------------------

template MasterAgreementProposal
  with
    p1  : Party
    p2  : Party
  where
    signatory p1

    controller p2 can
      Accept: ContractId MasterAgreementInstance
        do create MasterAgreementInstance with p1, p2
